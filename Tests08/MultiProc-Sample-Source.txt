\\ The graph look like this:
\\         1
\\      v/   \v
\\      2<----4
\\     v|     |v
\\      5---->3
\\ Toposorted order: 3->5->2->4->1

procedure first {
  read i;                                 \\ 1
  b=200;                                  \\ 2
  c= a;                                   \\ 3
  call second;                            \\ 4
  if (!(a != 0)) then {                   \\ 5
    while (beta > 0) {                    \\ 6
      oSCar  = 1 * beta % tmp;            \\ 7
      while (tmp< 5) {                    \\ 8
        oSCar = I - (k + j1k * chArlie);  \\ 9
      }
    }
    while (x >tmp) {                      \\ 10
      x = x + 1;                          \\ 11
      if (left!=1) then {                 \\ 12
        while ((left==right) && (b>=c)){  \\ 13
          Romeo = Romeo - 1;              \\ 14
          b = 0;                          \\ 15
          c = delta + l  / width + Romeo; \\ 16
          call fourth;                    \\ 17
        }
      }  else {
        while ((c>0)||(x<=c)) {           \\ 18
          c = c -1;                       \\ 19
        }
        x = x+ 1;                         \\ 20
      }
    }
  } else{
    a= 2;                                 \\ 21
  }
  print delta;                            \\ 22
}

procedure second {
  if ((x > 10) && (x < 99)) then {        \\ 23
    x = x % 10;                           \\ 24
  } else {
    x = 5;                                \\ 25
  }
  call fifth;                             \\ 26
  print sum;                              \\ 27
}

procedure third {
  apple = 19;                             \\ 28
  print apple;                            \\ 29
  while( apple > 10 ) {                   \\ 30
    read pear;                            \\ 31
    pear = (apple + x % 6) - (pear * x);  \\ 32

    if (x != apple) then {                \\ 33
      x = apple;                          \\ 34
    } else {
      x = pear;                           \\ 35
      read x;                             \\ 36
    }
  }
  pear = pear + 6;                        \\ 37
}

procedure fourth {
  read y;                                 \\ 38
  x=y;                                    \\ 39
  sum=sum*sum+f+x;                        \\ 40
  z=1;                                    \\ 41
  f=0;                                    \\ 42
  y=1;                                    \\ 43
  count = count + 1;                      \\ 44
  sum=0;                                  \\ 45
  call third;                             \\ 46
  while (count <= x) {                    \\ 47
    sum = sum + y;                        \\ 48
    m = y + z;                            \\ 49
    y=z;                                  \\ 50
    z=m;                                  \\ 51
    if(sum>10)then{                       \\ 52
      f = 1;                              \\ 53
    } else {
      f = 0;                              \\ 54
    }
    count=count+1;                        \\ 55
  }
  print sum;                              \\ 56
  call second;                            \\ 57
  a=f+y+z+sum*sum/f+x;                    \\ 58
  print a;                                \\ 59
}

procedure fifth {
  read x;                                 \\ 60
  call third;                             \\ 61
  count = 0;                              \\ 62
}

procedure separate {
  read read;                              \\ 63
  print print;                            \\ 64
}
